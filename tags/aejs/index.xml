<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aejs on clayto</title>
    <link>https://clayto.com/tags/aejs/</link>
    <description>Recent content in aejs on clayto</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Oct 2011 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://clayto.com/tags/aejs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Opcode patterns 70% finished</title>
      <link>https://clayto.com/2011/10/opcode-patterns-70-finished/</link>
      <pubDate>Thu, 13 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2011/10/opcode-patterns-70-finished/</guid>
      <description>genlut.py is really filling out. It generates the LUT for all 68k opcodes (68000 only), and I&amp;rsquo;m about 70% done. 77 down, 34 to go.
The OPCODES dict defines the first two bytes of each opcode, both static bits and operands. The operand strings act as keys into the PATTERNS struct, which contains all possible values for each operand.
The recursive function gen() is fed an opcode pattern which may contain operand strings as well as static bits.</description>
    </item>
    
    <item>
      <title>LUT</title>
      <link>https://clayto.com/2011/09/lut/</link>
      <pubDate>Thu, 22 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2011/09/lut/</guid>
      <description>Decoding is easy. Decoding requires a lot of typing. (I am starting to believe this is true of ever aspect of interpreted emulation&amp;hellip;)
For the AEJS decoder, I am creating a look-up table with every possible pattern for each instruction. It was my first idea, but I initially discarded it as &amp;ldquo;wasteful and inelegant&amp;rdquo;. Later, I accepted it as &amp;ldquo;really fast&amp;rdquo;.
I&amp;rsquo;m generating a large set of bit patterns that map to 68k opcodes, like so:</description>
    </item>
    
    <item>
      <title>Introducing AEJS</title>
      <link>https://clayto.com/2011/09/introducing-aejs/</link>
      <pubDate>Tue, 20 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2011/09/introducing-aejs/</guid>
      <description>Introducing AEJS, an Amiga emulator written in JavaScript. Wait, wording it like that makes it sound like it&amp;rsquo;s finished. It isn&amp;rsquo;t. It won&amp;rsquo;t be for a long time. AEJS is just a hobby, and will never hold a candle to UAE.
Why the Amiga? Given that this is my first emulator, it would have been much easier to go with a 6502 or 8080 instead, but I didn&amp;rsquo;t grow up with those; I grew up with a 68k powering an Amiga 500.</description>
    </item>
    
  </channel>
</rss>