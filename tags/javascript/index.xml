<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on clayto</title>
    <link>https://clayto.com/tags/javascript/</link>
    <description>Recent content in javascript on clayto</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Jul 2019 15:11:23 -0400</lastBuildDate>
    
	<atom:link href="https://clayto.com/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Web Component Icons</title>
      <link>https://clayto.com/2019/07/web-component-icons/</link>
      <pubDate>Thu, 25 Jul 2019 15:11:23 -0400</pubDate>
      
      <guid>https://clayto.com/2019/07/web-component-icons/</guid>
      <description>pfe-icon { --pfe-icon--Color: var(--pbp-fg-color, white); } @media (min-width: 750px) { #TableOfContents { float: right; padding: 10px; /* margin: 10px; */ margin: 0 0 20px 20px; background-color: #242424; } }  This is the story of &amp;lt;pfe-icon&amp;gt;. I set out to build a web component which loads icons on demand, displays them with customizable colors, avoids CORS issues, and is compatible with any existing SVG icon library.</description>
    </item>
    
    <item>
      <title>Open Jam Workshop</title>
      <link>https://clayto.com/2018/04/open-jam-workshop/</link>
      <pubDate>Tue, 17 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2018/04/open-jam-workshop/</guid>
      <description>The East Coast Game Conference was a lot of fun! Jared and I gave a 6-hour hands-on workshop where led the audience through building a game with entirely open-source gamedev tools.
Abstract  Join us for a workshop on game jams and open-source game development tools.
Open-source tools have been lovingly crafted that cover every medium of game development. Through a series of hands-on labs, we will introduce you to many of those tools, with a focus on using them for game jams.</description>
    </item>
    
    <item>
      <title>Popup Showdown</title>
      <link>https://clayto.com/2017/10/popup-showdown/</link>
      <pubDate>Sat, 07 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2017/10/popup-showdown/</guid>
      <description>POPUP SHOWDOWN   Close popups as fast as you can!
Looks like popups are disabled! Please enable them for this URL, look ^^^ in the URL bar.
CLOSED: 0 / 45 TIME: s  PLAY! MAKE IT STOP! You closed N/45 popups!
 You are the POPUP BLOCKER!
 Congratulations, you win!   The 1990s called; they want their popups back.  You didn&#39;t close enough popups to win.</description>
    </item>
    
    <item>
      <title>Open Jam</title>
      <link>https://clayto.com/2017/10/open-jam/</link>
      <pubDate>Fri, 06 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2017/10/open-jam/</guid>
      <description>Open Jam is an open-source themed game jam run by Jared and myself, with a lot of help from opensource.com. Check it out at openjam.io.
 Open Jam 2018 Open Jam 2017</description>
    </item>
    
    <item>
      <title>In Orange Light</title>
      <link>https://clayto.com/2017/08/in-orange-light/</link>
      <pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2017/08/in-orange-light/</guid>
      <description>Play now!  Three years ago, surrounded by monitors in a dark, blue-hued room, a particular screen caught my eye. My girlfriend&amp;rsquo;s (now wife&amp;rsquo;s) eye was caught by the same screen, and we crossed the room to investigate.
We were visiting the Indie Game Revolution exhibit at EMP in Seattle, and what we found on that screen was Scene I, Act I of Kentucky Route Zero. It took me three years, but I finally rediscovered KR0 a few weeks ago.</description>
    </item>
    
    <item>
      <title>Pity About Earth...</title>
      <link>https://clayto.com/games/pity-about-earth/</link>
      <pubDate>Sun, 07 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/games/pity-about-earth/</guid>
      <description>Play now!   Humanity, listen up. This is the Universe. I am sick of you sticking your nose where it doesn’t belong. That’s why there’s a huge asteroid heading straight for your pitiful Earth, courtesy of yours truly. I see you’ve built a flimsy Barrier and a stockpile of Missiles, but it won’t help. Enjoy the end times! Bye-bye. Talk soon.
– The Universe
  The weekend before Ludum Dare, I wrote a post about preparing for Ludum Dare 38.</description>
    </item>
    
    <item>
      <title>Meet SimPixel</title>
      <link>https://clayto.com/2017/03/meet-simpixel/</link>
      <pubDate>Fri, 10 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2017/03/meet-simpixel/</guid>
      <description>I have someone I&amp;rsquo;d like you to meet. SimPixel, meet everyone. Everyone, SimPixel.
 SimPixel, introduce yourself SimPixel is a WebGL visualizer for LED displays, very much like the ones Adam and Dan build over at Maniacal Labs.
#mlabs { height: 50vh !important; } @media screen and (min-width: 660px) { #mlabs { float: right; margin-left: 20px; } }    Very much alike. In fact, it&amp;rsquo;s probably so much like their displays because I built most of SimPixel while sitting at Adam&amp;rsquo;s workbench.</description>
    </item>
    
    <item>
      <title>Fireflies</title>
      <link>https://clayto.com/projects/fireflies/</link>
      <pubDate>Mon, 06 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/projects/fireflies/</guid>
      <description>Fireflies is a WebGL demo in which a friendly flock of fireflies forms shapes for your entertainment. Here are some live demo links, and a video.
Watch the original Watch the geekSPARK edition    Thanks to Loren Schmidt for agreeing to let me use the awesome pixel-person avatar.
View source, if you&amp;rsquo;re into that kind of thing.</description>
    </item>
    
    <item>
      <title>Tracer</title>
      <link>https://clayto.com/projects/tracer/</link>
      <pubDate>Wed, 25 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/projects/tracer/</guid>
      <description>Play now! 
Tracer is a 3D connect-the-dots game that Jared and I created for Ludum Dare 37.
Play now!
We were very happy with the ratings Tracer received. In the Innovation category, we placed 5th out of 1,489 games.
A more detailed blog post is available at the Scripta Games blog.
View source</description>
    </item>
    
    <item>
      <title>Kimotion at geekSPARK 2016</title>
      <link>https://clayto.com/2017/01/kimotion-at-geekspark-2016/</link>
      <pubDate>Thu, 12 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2017/01/kimotion-at-geekspark-2016/</guid>
      <description>Just a few short days months ago, Kimotion was on display at SPARKcon. SPARKcon is a large art festival in Raleigh, and we occupy a small slice of it called geekSPARK.
Kimotion Levels Up Last year&amp;rsquo;s tech had a rudimentary and finicky hand tracking system. It was workable, but a lot of visitors had trouble using it, especially kids. This year, I added Leap Motion support, which was a huge&amp;hellip; jump forward for hand tracking.</description>
    </item>
    
    <item>
      <title>Zorbio</title>
      <link>https://clayto.com/projects/zorbio/</link>
      <pubDate>Thu, 03 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/projects/zorbio/</guid>
      <description>Zorbio is a free multiplayer eat-em-up game that you can play in your browser!
Zorbio is brought to you by my good friend Jared Sprague and I, via our small game development company, Scripta, Inc. Follow Zorbio development on the Scripta blog, or on Facebook.
Play now!</description>
    </item>
    
    <item>
      <title>Lazyloading Web Components</title>
      <link>https://clayto.com/2016/09/lazyloading-web-components/</link>
      <pubDate>Tue, 06 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2016/09/lazyloading-web-components/</guid>
      <description>They say good developers are lazy. A tedious process is no match for a lazy developer. Below is an experiment in laziness. It&amp;rsquo;s a proof of concept for using Web Components without having to manually import each one.
I&amp;rsquo;m not sure exactly what to call it. It grazes the definitions of lazyloading, autoloading, and dependency injection, so I went with the laziest term.
Let&amp;rsquo;s set the scene, and find out if it&amp;rsquo;s a worthwhile developer convenience, or ease-of-use gone mad&amp;hellip;</description>
    </item>
    
    <item>
      <title>Kimotion Modding 101</title>
      <link>https://clayto.com/2016/08/kimotion-modding-101/</link>
      <pubDate>Sun, 28 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2016/08/kimotion-modding-101/</guid>
      <description>Kimotion is a simple framework for creating interactive art exhibits in 2D or 3D and supports both Kinect and Leap Motion for viewer input. This tutorial will focus on the Leap, so to proceed with the tutorial you&amp;rsquo;ll need to set up your Leap.
Once the leap service is running, you can set up Kimotion!
Get the code git clone git@github.com:mwcz/Kimotion.git cd Kimotion  If you don&amp;rsquo;t know how to use git, no problem, just download and extract the Kimotion zip file instead.</description>
    </item>
    
    <item>
      <title>Glow Rope</title>
      <link>https://clayto.com/2016/07/glow-rope/</link>
      <pubDate>Wed, 13 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2016/07/glow-rope/</guid>
      <description>uniform float TIMER_MAX; attribute float alive; attribute float size; attribute vec3 endPosition; attribute float timer; varying float vAlive; varying vec3 vEndPosition; varying float vTimer; varying float vProgress; void main() { vAlive = alive; vEndPosition = endPosition; vTimer = timer; vProgress = 1.0 - vTimer / TIMER_MAX; vec3 newPosition = mix( position, endPosition, vProgress ); vec4 mvPosition = modelViewMatrix * vec4( newPosition, 1.0 ); gl_PointSize = size; // * ( 300.</description>
    </item>
    
    <item>
      <title>Visualizing Network Traffic with WebGL</title>
      <link>https://clayto.com/2016/07/visualizing-network-traffic-with-webgl/</link>
      <pubDate>Wed, 13 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2016/07/visualizing-network-traffic-with-webgl/</guid>
      <description>&amp;ldquo;Finally,&amp;rdquo; I thought, &amp;ldquo;an excuse to play with WebGL at work!&amp;ldquo;
This year, I had the good fortune of contributing to a keynote presentation at Red Hat Summit. During the keynote, an audience of 5,000 played a mobile web game created by our team. The game was backed by several microservices which we modified on stage while the audience played.
My contribution was to display, in a visual and engaging way, the live network traffic flowing through our system.</description>
    </item>
    
    <item>
      <title>Square Off</title>
      <link>https://clayto.com/projects/squareoff/</link>
      <pubDate>Tue, 19 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/projects/squareoff/</guid>
      <description>Square Off is a 1v1 airhockey-style game that Jared and I built in 72 hours for the Ludum Dare 35 game jam. And beacuse it&amp;rsquo;s web-based, you can&amp;hellip;
Play now! 
 .sqoff-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); grid-gap: 10px; }   We were both very happy with how the game turned out, especially since this was our first game jam. Our fellow game creators were nice enough to give us some pretty good ratings, too.</description>
    </item>
    
    <item>
      <title>Kimotion</title>
      <link>https://clayto.com/projects/kimotion/</link>
      <pubDate>Sat, 26 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/projects/kimotion/</guid>
      <description>Kimotion is a framework for building reactive art displays.
Creating an interactive art exhibit with Kimotion is easy. Draw your ideas in either 2D or 3D. Kimotion will provide information about the scene, which you can use to influence your display.
Learn more at kimotion.xyz, or if you want to see it in action&amp;hellip;
Launch live demo!
Video clips These images, when played in rapid succession, create the illusion of motion!</description>
    </item>
    
    <item>
      <title>Make a Kimotion!</title>
      <link>https://clayto.com/2015/09/make-a-kimotion/</link>
      <pubDate>Sat, 26 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2015/09/make-a-kimotion/</guid>
      <description>A year ago, I had the joy of working on Digital Motion, an interactive art exhibit for Raleigh&amp;rsquo;s annual art festival, SPARKcon. The month leading up to SPARKcon 2014 was a mad dash of perfecting the graphics and physics equations of my DiMo: Particles display. After a wonderful weekend of watching visitors enjoy the weird things we made, a lesson began congealing itself in my mind.
Creating interactive art exhibits from scratch is really hard.</description>
    </item>
    
    <item>
      <title>Ping</title>
      <link>https://clayto.com/projects/ping/</link>
      <pubDate>Tue, 23 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/projects/ping/</guid>
      <description>Check out Ping! I created it for my team&amp;rsquo;s booth at Red Hat Summit 2015 (Red Hat&amp;rsquo;s huge annual conference), to promote Access Labs. It&amp;rsquo;s a 1-4 player pong clone with special powers.
It&amp;rsquo;s Web-based, so you can play it right this minute. Our booth had a quintet of USB gamepads, but your keyboard works just as well. Enjoy stomping the AI (instead of your fellow humans).
Play now!</description>
    </item>
    
    <item>
      <title>WebAssembly is the Keystone</title>
      <link>https://clayto.com/2015/06/webassembly-is-the-keystone/</link>
      <pubDate>Sat, 20 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2015/06/webassembly-is-the-keystone/</guid>
      <description>Within the last two days, WebAssembly (wasm) has graced the eyeballs of every JavaScript developer. If wasm is new to you, the articles linked at the end of this post fully describe what wasm is.
Since that&amp;rsquo;s been covered, I&amp;rsquo;d like to talk about one impact wasm will hopefully have on future of computing. To set the scene, a quote from the man himself:
 Meanwhile, I took one quick step that would demonstrate the concept of the Web as a universal, all-encompassing space.</description>
    </item>
    
    <item>
      <title>Naming Names - Anonymity is Dead</title>
      <link>https://clayto.com/2015/01/naming-names-anonymity-is-dead/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2015/01/naming-names-anonymity-is-dead/</guid>
      <description>There are only two hard problems in computer science: cache invalidation, naming things, and off-by-one errors.   Phil Karlton, but I can&#39;t find a name for the original source...    Contriving names for things is so commonplace for computer programmers that we may be thinking up names more often than any other profession. Every day, usually dozens of times, I find myself trying to imagine the perfect name for a function or variable or module.</description>
    </item>
    
    <item>
      <title>DiMo: The Deconstruction of Falling Stars</title>
      <link>https://clayto.com/2014/10/dimo-the-deconstruction-of-falling-stars/</link>
      <pubDate>Thu, 30 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2014/10/dimo-the-deconstruction-of-falling-stars/</guid>
      <description>Imagine a solitary blue dot.
Unless you let your imagination run away with itself, this is going to be a pretty boring dot. Now, imagine a second, larger dot (you can pick the color).
Red, nice choice! The scene is now slightly more interesting, since now you&amp;rsquo;ve got two dots to think about. You can ponder their positions, and relative sizes. No motion though; still pretty boring!
Pretty soon, your keen and restless mind will imagine that the larger dot exerts a gravitational pull on the smaller one.</description>
    </item>
    
    <item>
      <title>DiMo: Particles</title>
      <link>https://clayto.com/projects/dimo/</link>
      <pubDate>Mon, 25 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/projects/dimo/</guid>
      <description>Dimo: Particles is an artistic particle physics simulation and interactive art exhibit I created (along with fellow Red Hat engineers Ian Hands and Ben Pritchett) for the SPARKcon festival in 2014.
Launch live demo!
  Pictures These pictures are from the art exhibit at geekSPARK in 2014.
$GALLERY
After the event, I wrote this opensource.com article about the experience.
The source code is, of course, open.</description>
    </item>
    
    <item>
      <title>Particles and π - DiMo Comes to Life</title>
      <link>https://clayto.com/2014/08/particles-and-%CF%80-dimo-comes-to-life/</link>
      <pubDate>Mon, 25 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2014/08/particles-and-%CF%80-dimo-comes-to-life/</guid>
      <description>A player walks up Fayetteville St in Raleigh, North Carolina. SPARKcon has begun, and dozens of artists are strewn along the street, hard at work creating elaborate chalk art on the asphalt. A light rain is falling, and some artists are holding umbrellas over their work, some have draped tarps over themselves and their sketches, but most don&amp;rsquo;t seem to care, as if creating their art is more important than how long it lasts.</description>
    </item>
    
    <item>
      <title>RGB WebGL Color Cube</title>
      <link>https://clayto.com/2014/03/rgb-webgl-color-cube/</link>
      <pubDate>Sun, 23 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2014/03/rgb-webgl-color-cube/</guid>
      <description>I spent a bit of time this weekend building an RGB color cube for ColorPal, using Three.js. Drag and drop any image, and you&amp;rsquo;ll see a cube with all the pixels of your image mapped into 3D space.
Launch live demo! and view the code.
Your web browser must support WebGL, which at this point in history means a fairly recent Firefox or Chrome. In case your web browser doesn&amp;rsquo;t support WebGL, here&amp;rsquo;s a video to enjoy while you download Firefox Nightly.</description>
    </item>
    
    <item>
      <title>Introducing Drop64, ezpz data URI generator</title>
      <link>https://clayto.com/2014/02/introducing-drop64-ezpz-data-uri-generator/</link>
      <pubDate>Tue, 25 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2014/02/introducing-drop64-ezpz-data-uri-generator/</guid>
      <description>A few weeks ago, a coworker of mine ran into some font issues. Firefox doesn&amp;rsquo;t allow cross-origin requests for web fonts, and he was using a tool called Font Squirrel to generate fonts, including data URIs.
Embedding a data URI for a font (or image) inside a CSS file is a common technique for reducing the number of HTTP requests. In this case, it also negates the need for a cross-domain request to fetch the font file, because the file&amp;rsquo;s contents are already embedded.</description>
    </item>
    
    <item>
      <title>Drop64</title>
      <link>https://clayto.com/projects/drop64/</link>
      <pubDate>Wed, 05 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/projects/drop64/</guid>
      <description>Drop64 is an easy drag-and-drop tool for generating Data URIs from any file.
Check it out at drop64.com.
Here&amp;rsquo;s a demo recording of how easy it is.
Some benefits of Data URIs are:
 Fewer HTTP requests means faster page loads avoid cross-origin resource loading issues (fonts in Firefox, for example) you can paste the Data URI directly into your web browser URL bar to view the file (occasionally convenient)  If you noticed the similarity to ColorPal, well done!</description>
    </item>
    
    <item>
      <title>ColorPal CLI!</title>
      <link>https://clayto.com/2013/11/colorpal-cli/</link>
      <pubDate>Thu, 07 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2013/11/colorpal-cli/</guid>
      <description>ColorPal CLI is a command-line version of ColorPal, my HTML5 color palette generator.
Demo! $ node cpal.js -f hex -s 8 MyImage.png #07070b #bac0c4 #d1bd66 #7e8899 #696964 #c4b441 #65683e #394434  Get it! npm install -g canvas requirejs # install dependencies git clone git@github.com:mwcz/colorpal-cli.git cd colorpal-cli  Use it! To display the help text, simply run the command without any arguments.
node cpal.js Generate a color palette from an image!</description>
    </item>
    
    <item>
      <title>ColorPal Output Update</title>
      <link>https://clayto.com/2012/07/colorpal-output-update/</link>
      <pubDate>Mon, 30 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2012/07/colorpal-output-update/</guid>
      <description>Hi pals.
This is a speedy post about a speedy update I made today to ColorPal, an HTML5 tool I wrote that automatically generates color palettes from a photograph.
Previously, ColorPal provided hex codes for each color extracted from the image. Eight individual &amp;lt;input&amp;gt;s at the bottom of the page displayed the colors.
I use ColorPal a lot (my own dogfood and all that) when designing websites, and it wasn&amp;rsquo;t long before I got fed up (hah!</description>
    </item>
    
    <item>
      <title>ColorPal palettes improved!</title>
      <link>https://clayto.com/2012/02/colorpal-palettes-improved/</link>
      <pubDate>Fri, 10 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2012/02/colorpal-palettes-improved/</guid>
      <description>In my last post on the subject, I introduced ColorPal, my HTML5 color palette generation tool. It didn&amp;rsquo;t perform well with certain types of images, so I fixed it. :)

Color palettes will now match the image even better. Especially for images with infrequent but important colors. Here&amp;rsquo;s a comparison of the old and new methods, on an image that is mostly black:
You can see that with the old method, the black pixels definitely took over the palette.</description>
    </item>
    
    <item>
      <title>ColorPal</title>
      <link>https://clayto.com/projects/colorpal/</link>
      <pubDate>Mon, 16 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/projects/colorpal/</guid>
      <description>ColorPal is an HTML5 color palette generator. Here&amp;rsquo;s a gif demonstrating how to use ColorPal. The color quality in gifs is pretty terrible, but you can still see the basic usage.
Try it out at colorpal.org.
ColorPal also has a command-line interface, powered by Node.js.
I&amp;rsquo;ve written some posts about ColorPal.
 </description>
    </item>
    
    <item>
      <title>ColorPal Alpha</title>
      <link>https://clayto.com/2012/01/colorpal-alpha/</link>
      <pubDate>Mon, 16 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2012/01/colorpal-alpha/</guid>
      <description>Introducing ColorPal!
I&amp;rsquo;ve been toying with color palette generation for years. My photography website has always had some form of dynamic palette, so the theme of each page matches the photo. You can see the current iteration here:
 I owe the idea of photo-matching website palettes to Noah Grey. Each iteration of my photo site has gotten a slightly more advanced palette generation tool. You can see murmurs of them in the old canvas demos I&amp;rsquo;ve posted.</description>
    </item>
    
    <item>
      <title>Bouncey returns - more canvas physics</title>
      <link>https://clayto.com/2011/11/bouncey-returns-more-canvas-physics/</link>
      <pubDate>Fri, 18 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2011/11/bouncey-returns-more-canvas-physics/</guid>
      <description>This is a slightly upgraded version of the physics demo I showed in my last post.
It is still&amp;hellip;
&amp;ldquo;a buggy, rudimentary, just-for-fun javascript physics simulator.&amp;rdquo;
This version has:
 pre-defined initial states gravity friction  It still has the &amp;ldquo;clinging&amp;rdquo; bug. I know how to fix it, but didn&amp;rsquo;t deem it important enough to spend time on it. :)
The code is well commented, so feel free to hack on it.</description>
    </item>
    
    <item>
      <title>Bouncey</title>
      <link>https://clayto.com/projects/bouncey/</link>
      <pubDate>Thu, 17 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/projects/bouncey/</guid>
      <description>Bouncey is a simple physics demo I wrote in early/mid 2011, with some contributions and bugfixes from my good friend Greg Gardner.
Fun, simple, and oddly relaxing.
#cnvs { background-color: #1f1f1f; margin: 0 auto; -webkit-box-shadow: 0px 2px 18px rgba( 0, 0, 0, 0.7 ); -moz-box-shadow: 0px 2px 18px rgba( 0, 0, 0, 0.7 ); -o-box-shadow: 0px 2px 18px rgba( 0, 0, 0, 0.7 ); box-shadow: 0px 2px 18px rgba( 0, 0, 0, 0.</description>
    </item>
    
    <item>
      <title>Bouncey - canvas physics</title>
      <link>https://clayto.com/2011/11/bouncey-canvas-physics/</link>
      <pubDate>Thu, 17 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2011/11/bouncey-canvas-physics/</guid>
      <description>This is Bouncey. It&amp;rsquo;s a simple physics demo I wrote in early/mid 2011, with some contributions and bugfixes from my good friend Greg Gardner.
The description for bouncey&amp;rsquo;s github repo is:
&amp;ldquo;a buggy, rudimentary, just-for-fun javascript physics simulator.&amp;rdquo;
It covers Newton&amp;rsquo;s laws of motion.
#cnvs { margin: 0 auto; display: block; width: 100%; border: 1px solid #464646; -webkit-box-shadow: 0px 0px 3px rgba( 0, 0, 0, 0.7 ); -moz-box-shadow: 0px 0px 3px rgba( 0, 0, 0, 0.</description>
    </item>
    
    <item>
      <title>HTML5 canvas point operations</title>
      <link>https://clayto.com/2011/11/html5-canvas-point-operations/</link>
      <pubDate>Thu, 17 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2011/11/html5-canvas-point-operations/</guid>
      <description>This is the last demo I made using JSImage. I created it some time around 2009-2010. At the time, I had checked out an imaging book from my university&amp;rsquo;s library at least ten times. Most of the exercises in that book I implemented in Python using PIL, but point operations were simple enough to port to JavaScript quickly.
Point operations are image alterations that affect all pixels equally. Other operations, like blurring for example, each result pixel depends on adjacent pixels.</description>
    </item>
    
    <item>
      <title>HTML5 canvas RGB histogram</title>
      <link>https://clayto.com/2011/11/html5-canvas-rgb-histogram/</link>
      <pubDate>Wed, 16 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2011/11/html5-canvas-rgb-histogram/</guid>
      <description>This is yet another demo from around 2009. It&amp;rsquo;s simple enough. Click a button, draw an unbinned RGB histogram of the source image.
It&amp;rsquo;s powered by an early version of an old JS toolkit I wrote called JSImage. The latest version is available at my JSImage github repo. Don&amp;rsquo;t be fooled by the 2011 commits, those are just artifacts from svn-&amp;gt;git migration. No guarantees that the histo&amp;rsquo;s are actually correct.</description>
    </item>
    
    <item>
      <title>HTML5 canvas area selection averaging</title>
      <link>https://clayto.com/2011/11/html5-canvas-area-selection-averaging/</link>
      <pubDate>Wed, 16 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2011/11/html5-canvas-area-selection-averaging/</guid>
      <description>This is a demo from late 2009. It&amp;rsquo;s an extension of the single-pixel eyedropper I wrote previously.
It&amp;rsquo;s powered by an early version of an old JS toolkit I wrote called JSImage. The latest version is available at my JSImage github repo. Don&amp;rsquo;t be fooled by the 2011 commits, those are just artifacts from svn-&amp;gt;git migration. No guarantees that the histo&amp;rsquo;s are actually correct. :)
Click and drag to set the image border to the average of the selected pixels.</description>
    </item>
    
    <item>
      <title>AEJS</title>
      <link>https://clayto.com/projects/aejs/</link>
      <pubDate>Thu, 13 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/projects/aejs/</guid>
      <description>AEJS was an experimental Amiga 500 emulator written in JavaScript. The name stands for Amiga Emulator JavaScript and is pronounced &amp;ldquo;aegis&amp;rdquo;.
 My motivation to build AEJS came from these sources:
 The HTML5 era introduced new APIs which finally made it possible: Typed arrays, Web Audio, File, Canvas, Fullscreen, Gamepad Fabrice Bellard&amp;rsquo;s JavaScript PC emulator JavaScript performance was finally good enough to make it feasible It bridged front-end web development with low-level machine code, both of which are super awesome I still have the Amiga 500 I played with obsessively since 3 years-old The 68000 is legendary and I wanted to find out why  I stopped development for these reasons:</description>
    </item>
    
    <item>
      <title>Opcode patterns 70% finished</title>
      <link>https://clayto.com/2011/10/opcode-patterns-70-finished/</link>
      <pubDate>Thu, 13 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2011/10/opcode-patterns-70-finished/</guid>
      <description>genlut.py is really filling out. It generates the LUT for all 68k opcodes (68000 only), and I&amp;rsquo;m about 70% done. 77 down, 34 to go.
The OPCODES dict defines the first two bytes of each opcode, both static bits and operands. The operand strings act as keys into the PATTERNS struct, which contains all possible values for each operand.
The recursive function gen() is fed an opcode pattern which may contain operand strings as well as static bits.</description>
    </item>
    
    <item>
      <title>LUT</title>
      <link>https://clayto.com/2011/09/lut/</link>
      <pubDate>Thu, 22 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2011/09/lut/</guid>
      <description>Decoding is easy. Decoding requires a lot of typing. (I am starting to believe this is true of ever aspect of interpreted emulation&amp;hellip;)
For the AEJS decoder, I am creating a look-up table with every possible pattern for each instruction. It was my first idea, but I initially discarded it as &amp;ldquo;wasteful and inelegant&amp;rdquo;. Later, I accepted it as &amp;ldquo;really fast&amp;rdquo;.
I&amp;rsquo;m generating a large set of bit patterns that map to 68k opcodes, like so:</description>
    </item>
    
    <item>
      <title>Introducing AEJS</title>
      <link>https://clayto.com/2011/09/introducing-aejs/</link>
      <pubDate>Tue, 20 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/2011/09/introducing-aejs/</guid>
      <description>Introducing AEJS, an Amiga emulator written in JavaScript. Wait, wording it like that makes it sound like it&amp;rsquo;s finished. It isn&amp;rsquo;t. It won&amp;rsquo;t be for a long time. AEJS is just a hobby, and will never hold a candle to UAE.
Why the Amiga? Given that this is my first emulator, it would have been much easier to go with a 6502 or 8080 instead, but I didn&amp;rsquo;t grow up with those; I grew up with a 68k powering an Amiga 500.</description>
    </item>
    
    <item>
      <title>JSImage</title>
      <link>https://clayto.com/projects/jsimage/</link>
      <pubDate>Thu, 01 Jan 2009 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/projects/jsimage/</guid>
      <description>JSImage was a basic, buggy, just-for-fun image processing library that I wrote in 2008/2009 when I first started seriously studying JavaScript.
A stumbled across a book in my university library, and started implementing the algorithms on the newly available HTML5 canvas element.
I&amp;rsquo;ve made several posts about JSImage which contain live demos.
I think I put more work into code formatting than correct output. ;)</description>
    </item>
    
    <item>
      <title>median-cut.js</title>
      <link>https://clayto.com/projects/mediancut/</link>
      <pubDate>Thu, 01 Jan 2009 00:00:00 +0000</pubDate>
      
      <guid>https://clayto.com/projects/mediancut/</guid>
      <description>The unfortunately-named median-cut.js is the library that powers ColorPal&amp;rsquo;s palette generation.
I say it&amp;rsquo;s unfortunately named because it doesn&amp;rsquo;t implement a pure median-cut algorithm. It&amp;rsquo;s identical, except that instead of cutting boxes at their median, they are instead cut at the mean. This results in more pleasing color palettes in most cases.
Here&amp;rsquo;s a comparison:
If you&amp;rsquo;re interested in median-cut vs mean-cut, see this post for a technical discussion.
The code is available on GitHub.</description>
    </item>
    
  </channel>
</rss>