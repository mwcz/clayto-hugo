<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="710" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="693.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="693.00"> </text><svg id="frames" x="10" width="1180" total_samples="10396"><g><title>.annobin_lto (6 samples, 0.06%)</title><rect x="0.0096%" y="629" width="0.0577%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="6"/><text x="0.2596%" y="639.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (5 samples, 0.05%)</title><rect x="0.0673%" y="629" width="0.0481%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="5"/><text x="0.3173%" y="639.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3 samples, 0.03%)</title><rect x="0.1154%" y="629" width="0.0289%" height="15" fill="rgb(221,193,54)" fg:x="12" fg:w="3"/><text x="0.3654%" y="639.50"></text></g><g><title>[rlox] (2 samples, 0.02%)</title><rect x="0.1443%" y="629" width="0.0192%" height="15" fill="rgb(248,212,6)" fg:x="15" fg:w="2"/><text x="0.3943%" y="639.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="0.1635%" y="629" width="0.0385%" height="15" fill="rgb(208,68,35)" fg:x="17" fg:w="4"/><text x="0.4135%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::scanner::Scanner&gt; (2 samples, 0.02%)</title><rect x="0.2020%" y="341" width="0.0192%" height="15" fill="rgb(232,128,0)" fg:x="21" fg:w="2"/><text x="0.4520%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;rlox::token::Token&gt;&gt; (2 samples, 0.02%)</title><rect x="0.2020%" y="325" width="0.0192%" height="15" fill="rgb(207,160,47)" fg:x="21" fg:w="2"/><text x="0.4520%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="0.2020%" y="309" width="0.0192%" height="15" fill="rgb(228,23,34)" fg:x="21" fg:w="2"/><text x="0.4520%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[rlox::token::Token]&gt; (2 samples, 0.02%)</title><rect x="0.2020%" y="293" width="0.0192%" height="15" fill="rgb(218,30,26)" fg:x="21" fg:w="2"/><text x="0.4520%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::token::Token&gt; (2 samples, 0.02%)</title><rect x="0.2020%" y="277" width="0.0192%" height="15" fill="rgb(220,122,19)" fg:x="21" fg:w="2"/><text x="0.4520%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.02%)</title><rect x="0.2020%" y="261" width="0.0192%" height="15" fill="rgb(250,228,42)" fg:x="21" fg:w="2"/><text x="0.4520%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.02%)</title><rect x="0.2020%" y="245" width="0.0192%" height="15" fill="rgb(240,193,28)" fg:x="21" fg:w="2"/><text x="0.4520%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.02%)</title><rect x="0.2020%" y="229" width="0.0192%" height="15" fill="rgb(216,20,37)" fg:x="21" fg:w="2"/><text x="0.4520%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="0.2020%" y="213" width="0.0192%" height="15" fill="rgb(206,188,39)" fg:x="21" fg:w="2"/><text x="0.4520%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="0.2020%" y="197" width="0.0192%" height="15" fill="rgb(217,207,13)" fg:x="21" fg:w="2"/><text x="0.4520%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="0.2020%" y="181" width="0.0192%" height="15" fill="rgb(231,73,38)" fg:x="21" fg:w="2"/><text x="0.4520%" y="191.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="0.2020%" y="165" width="0.0192%" height="15" fill="rgb(225,20,46)" fg:x="21" fg:w="2"/><text x="0.4520%" y="175.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="0.2020%" y="149" width="0.0192%" height="15" fill="rgb(210,31,41)" fg:x="21" fg:w="2"/><text x="0.4520%" y="159.50"></text></g><g><title>rlox::scanner::Scanner::add_token (3 samples, 0.03%)</title><rect x="0.2212%" y="309" width="0.0289%" height="15" fill="rgb(221,200,47)" fg:x="23" fg:w="3"/><text x="0.4712%" y="319.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (3 samples, 0.03%)</title><rect x="0.2212%" y="293" width="0.0289%" height="15" fill="rgb(226,26,5)" fg:x="23" fg:w="3"/><text x="0.4712%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (3 samples, 0.03%)</title><rect x="0.2212%" y="277" width="0.0289%" height="15" fill="rgb(249,33,26)" fg:x="23" fg:w="3"/><text x="0.4712%" y="287.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (3 samples, 0.03%)</title><rect x="0.2212%" y="261" width="0.0289%" height="15" fill="rgb(235,183,28)" fg:x="23" fg:w="3"/><text x="0.4712%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (3 samples, 0.03%)</title><rect x="0.2212%" y="245" width="0.0289%" height="15" fill="rgb(221,5,38)" fg:x="23" fg:w="3"/><text x="0.4712%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3 samples, 0.03%)</title><rect x="0.2212%" y="229" width="0.0289%" height="15" fill="rgb(247,18,42)" fg:x="23" fg:w="3"/><text x="0.4712%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.03%)</title><rect x="0.2212%" y="213" width="0.0289%" height="15" fill="rgb(241,131,45)" fg:x="23" fg:w="3"/><text x="0.4712%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.03%)</title><rect x="0.2212%" y="197" width="0.0289%" height="15" fill="rgb(249,31,29)" fg:x="23" fg:w="3"/><text x="0.4712%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.03%)</title><rect x="0.2212%" y="181" width="0.0289%" height="15" fill="rgb(225,111,53)" fg:x="23" fg:w="3"/><text x="0.4712%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.02%)</title><rect x="0.2309%" y="165" width="0.0192%" height="15" fill="rgb(238,160,17)" fg:x="24" fg:w="2"/><text x="0.4809%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="0.2309%" y="149" width="0.0192%" height="15" fill="rgb(214,148,48)" fg:x="24" fg:w="2"/><text x="0.4809%" y="159.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="0.2309%" y="133" width="0.0192%" height="15" fill="rgb(232,36,49)" fg:x="24" fg:w="2"/><text x="0.4809%" y="143.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (3,551 samples, 34.16%)</title><rect x="0.2597%" y="261" width="34.1574%" height="15" fill="rgb(209,103,24)" fg:x="27" fg:w="3551"/><text x="0.5097%" y="271.50">&lt;core::str::iter::Chars as core::iter::traits::iterator..</text></g><g><title>core::str::validations::next_code_point (3,551 samples, 34.16%)</title><rect x="0.2597%" y="245" width="34.1574%" height="15" fill="rgb(229,88,8)" fg:x="27" fg:w="3551"/><text x="0.5097%" y="255.50">core::str::validations::next_code_point</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,046 samples, 10.06%)</title><rect x="24.3555%" y="229" width="10.0616%" height="15" fill="rgb(213,181,19)" fg:x="2532" fg:w="1046"/><text x="24.6055%" y="239.50">&lt;core::slice::i..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (691 samples, 6.65%)</title><rect x="27.7703%" y="213" width="6.6468%" height="15" fill="rgb(254,191,54)" fg:x="2887" fg:w="691"/><text x="28.0203%" y="223.50">core::sli..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (476 samples, 4.58%)</title><rect x="29.8384%" y="197" width="4.5787%" height="15" fill="rgb(241,83,37)" fg:x="3102" fg:w="476"/><text x="30.0884%" y="207.50">core:..</text></g><g><title>rlox::scanner::Scanner::advance (4,023 samples, 38.70%)</title><rect x="0.2501%" y="309" width="38.6976%" height="15" fill="rgb(233,36,39)" fg:x="26" fg:w="4023"/><text x="0.5001%" y="319.50">rlox::scanner::Scanner::advance</text></g><g><title>core::iter::traits::iterator::Iterator::nth (4,023 samples, 38.70%)</title><rect x="0.2501%" y="293" width="38.6976%" height="15" fill="rgb(226,3,54)" fg:x="26" fg:w="4023"/><text x="0.5001%" y="303.50">core::iter::traits::iterator::Iterator::nth</text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (4,022 samples, 38.69%)</title><rect x="0.2597%" y="277" width="38.6880%" height="15" fill="rgb(245,192,40)" fg:x="27" fg:w="4022"/><text x="0.5097%" y="287.50">core::iter::traits::iterator::Iterator::advance_by</text></g><g><title>core::option::Option&lt;T&gt;::ok_or (470 samples, 4.52%)</title><rect x="34.4267%" y="261" width="4.5210%" height="15" fill="rgb(238,167,29)" fg:x="3579" fg:w="470"/><text x="34.6767%" y="271.50">core:..</text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (2 samples, 0.02%)</title><rect x="38.9477%" y="293" width="0.0192%" height="15" fill="rgb(232,182,51)" fg:x="4049" fg:w="2"/><text x="39.1977%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (2 samples, 0.02%)</title><rect x="38.9477%" y="277" width="0.0192%" height="15" fill="rgb(231,60,39)" fg:x="4049" fg:w="2"/><text x="39.1977%" y="287.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (2 samples, 0.02%)</title><rect x="38.9477%" y="261" width="0.0192%" height="15" fill="rgb(208,69,12)" fg:x="4049" fg:w="2"/><text x="39.1977%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (2 samples, 0.02%)</title><rect x="38.9477%" y="245" width="0.0192%" height="15" fill="rgb(235,93,37)" fg:x="4049" fg:w="2"/><text x="39.1977%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.02%)</title><rect x="38.9477%" y="229" width="0.0192%" height="15" fill="rgb(213,116,39)" fg:x="4049" fg:w="2"/><text x="39.1977%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.02%)</title><rect x="38.9477%" y="213" width="0.0192%" height="15" fill="rgb(222,207,29)" fg:x="4049" fg:w="2"/><text x="39.1977%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.02%)</title><rect x="38.9477%" y="197" width="0.0192%" height="15" fill="rgb(206,96,30)" fg:x="4049" fg:w="2"/><text x="39.1977%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.02%)</title><rect x="38.9477%" y="181" width="0.0192%" height="15" fill="rgb(218,138,4)" fg:x="4049" fg:w="2"/><text x="39.1977%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="38.9477%" y="165" width="0.0192%" height="15" fill="rgb(250,191,14)" fg:x="4049" fg:w="2"/><text x="39.1977%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="38.9477%" y="149" width="0.0192%" height="15" fill="rgb(239,60,40)" fg:x="4049" fg:w="2"/><text x="39.1977%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="38.9477%" y="133" width="0.0192%" height="15" fill="rgb(206,27,48)" fg:x="4049" fg:w="2"/><text x="39.1977%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="38.9477%" y="117" width="0.0192%" height="15" fill="rgb(225,35,8)" fg:x="4049" fg:w="2"/><text x="39.1977%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="38.9477%" y="101" width="0.0192%" height="15" fill="rgb(250,213,24)" fg:x="4049" fg:w="2"/><text x="39.1977%" y="111.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="38.9477%" y="85" width="0.0192%" height="15" fill="rgb(247,123,22)" fg:x="4049" fg:w="2"/><text x="39.1977%" y="95.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="38.9477%" y="69" width="0.0192%" height="15" fill="rgb(231,138,38)" fg:x="4049" fg:w="2"/><text x="39.1977%" y="79.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1,448 samples, 13.93%)</title><rect x="38.9669%" y="245" width="13.9284%" height="15" fill="rgb(231,145,46)" fg:x="4051" fg:w="1448"/><text x="39.2169%" y="255.50">&lt;core::str::iter::Cha..</text></g><g><title>core::str::validations::next_code_point (1,448 samples, 13.93%)</title><rect x="38.9669%" y="229" width="13.9284%" height="15" fill="rgb(251,118,11)" fg:x="4051" fg:w="1448"/><text x="39.2169%" y="239.50">core::str::validation..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (411 samples, 3.95%)</title><rect x="48.9419%" y="213" width="3.9534%" height="15" fill="rgb(217,147,25)" fg:x="5088" fg:w="411"/><text x="49.1919%" y="223.50">&lt;cor..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (255 samples, 2.45%)</title><rect x="50.4425%" y="197" width="2.4529%" height="15" fill="rgb(247,81,37)" fg:x="5244" fg:w="255"/><text x="50.6925%" y="207.50">co..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (172 samples, 1.65%)</title><rect x="51.2409%" y="181" width="1.6545%" height="15" fill="rgb(209,12,38)" fg:x="5327" fg:w="172"/><text x="51.4909%" y="191.50"></text></g><g><title>rlox::scanner::Scanner::advance (1,655 samples, 15.92%)</title><rect x="38.9669%" y="293" width="15.9196%" height="15" fill="rgb(227,1,9)" fg:x="4051" fg:w="1655"/><text x="39.2169%" y="303.50">rlox::scanner::Scanner::..</text></g><g><title>core::iter::traits::iterator::Iterator::nth (1,655 samples, 15.92%)</title><rect x="38.9669%" y="277" width="15.9196%" height="15" fill="rgb(248,47,43)" fg:x="4051" fg:w="1655"/><text x="39.2169%" y="287.50">core::iter::traits::iter..</text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (1,655 samples, 15.92%)</title><rect x="38.9669%" y="261" width="15.9196%" height="15" fill="rgb(221,10,30)" fg:x="4051" fg:w="1655"/><text x="39.2169%" y="271.50">core::iter::traits::iter..</text></g><g><title>core::option::Option&lt;T&gt;::ok_or (207 samples, 1.99%)</title><rect x="52.8953%" y="245" width="1.9912%" height="15" fill="rgb(210,229,1)" fg:x="5499" fg:w="207"/><text x="53.1453%" y="255.50">c..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1,888 samples, 18.16%)</title><rect x="54.8865%" y="245" width="18.1608%" height="15" fill="rgb(222,148,37)" fg:x="5706" fg:w="1888"/><text x="55.1365%" y="255.50">&lt;core::str::iter::Chars as c..</text></g><g><title>core::str::validations::next_code_point (1,888 samples, 18.16%)</title><rect x="54.8865%" y="229" width="18.1608%" height="15" fill="rgb(234,67,33)" fg:x="5706" fg:w="1888"/><text x="55.1365%" y="239.50">core::str::validations::next..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (600 samples, 5.77%)</title><rect x="67.2759%" y="213" width="5.7715%" height="15" fill="rgb(247,98,35)" fg:x="6994" fg:w="600"/><text x="67.5259%" y="223.50">&lt;core::..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (394 samples, 3.79%)</title><rect x="69.2574%" y="197" width="3.7899%" height="15" fill="rgb(247,138,52)" fg:x="7200" fg:w="394"/><text x="69.5074%" y="207.50">core..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (268 samples, 2.58%)</title><rect x="70.4694%" y="181" width="2.5779%" height="15" fill="rgb(213,79,30)" fg:x="7326" fg:w="268"/><text x="70.7194%" y="191.50">co..</text></g><g><title>rlox::scanner::Scanner::identifier (3,779 samples, 36.35%)</title><rect x="38.9477%" y="309" width="36.3505%" height="15" fill="rgb(246,177,23)" fg:x="4049" fg:w="3779"/><text x="39.1977%" y="319.50">rlox::scanner::Scanner::identifier</text></g><g><title>rlox::scanner::Scanner::peek (2,122 samples, 20.41%)</title><rect x="54.8865%" y="293" width="20.4117%" height="15" fill="rgb(230,62,27)" fg:x="5706" fg:w="2122"/><text x="55.1365%" y="303.50">rlox::scanner::Scanner::peek</text></g><g><title>core::iter::traits::iterator::Iterator::nth (2,122 samples, 20.41%)</title><rect x="54.8865%" y="277" width="20.4117%" height="15" fill="rgb(216,154,8)" fg:x="5706" fg:w="2122"/><text x="55.1365%" y="287.50">core::iter::traits::iterator::It..</text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (2,122 samples, 20.41%)</title><rect x="54.8865%" y="261" width="20.4117%" height="15" fill="rgb(244,35,45)" fg:x="5706" fg:w="2122"/><text x="55.1365%" y="271.50">core::iter::traits::iterator::It..</text></g><g><title>core::option::Option&lt;T&gt;::ok_or (234 samples, 2.25%)</title><rect x="73.0473%" y="245" width="2.2509%" height="15" fill="rgb(251,115,12)" fg:x="7594" fg:w="234"/><text x="73.2973%" y="255.50">c..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (316 samples, 3.04%)</title><rect x="75.2982%" y="261" width="3.0396%" height="15" fill="rgb(240,54,50)" fg:x="7828" fg:w="316"/><text x="75.5482%" y="271.50">&lt;co..</text></g><g><title>core::str::validations::next_code_point (316 samples, 3.04%)</title><rect x="75.2982%" y="245" width="3.0396%" height="15" fill="rgb(233,84,52)" fg:x="7828" fg:w="316"/><text x="75.5482%" y="255.50">cor..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (87 samples, 0.84%)</title><rect x="77.5010%" y="229" width="0.8369%" height="15" fill="rgb(207,117,47)" fg:x="8057" fg:w="87"/><text x="77.7510%" y="239.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (58 samples, 0.56%)</title><rect x="77.7799%" y="213" width="0.5579%" height="15" fill="rgb(249,43,39)" fg:x="8086" fg:w="58"/><text x="78.0299%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (41 samples, 0.39%)</title><rect x="77.9434%" y="197" width="0.3944%" height="15" fill="rgb(209,38,44)" fg:x="8103" fg:w="41"/><text x="78.1934%" y="207.50"></text></g><g><title>rlox::scanner::Scanner::match_next (361 samples, 3.47%)</title><rect x="75.2982%" y="309" width="3.4725%" height="15" fill="rgb(236,212,23)" fg:x="7828" fg:w="361"/><text x="75.5482%" y="319.50">rlo..</text></g><g><title>core::iter::traits::iterator::Iterator::nth (361 samples, 3.47%)</title><rect x="75.2982%" y="293" width="3.4725%" height="15" fill="rgb(242,79,21)" fg:x="7828" fg:w="361"/><text x="75.5482%" y="303.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (361 samples, 3.47%)</title><rect x="75.2982%" y="277" width="3.4725%" height="15" fill="rgb(211,96,35)" fg:x="7828" fg:w="361"/><text x="75.5482%" y="287.50">cor..</text></g><g><title>core::option::Option&lt;T&gt;::ok_or (45 samples, 0.43%)</title><rect x="78.3378%" y="261" width="0.4329%" height="15" fill="rgb(253,215,40)" fg:x="8144" fg:w="45"/><text x="78.5878%" y="271.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (631 samples, 6.07%)</title><rect x="78.7707%" y="261" width="6.0696%" height="15" fill="rgb(211,81,21)" fg:x="8189" fg:w="631"/><text x="79.0207%" y="271.50">&lt;core::s..</text></g><g><title>core::str::validations::next_code_point (631 samples, 6.07%)</title><rect x="78.7707%" y="245" width="6.0696%" height="15" fill="rgb(208,190,38)" fg:x="8189" fg:w="631"/><text x="79.0207%" y="255.50">core::st..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (189 samples, 1.82%)</title><rect x="83.0223%" y="229" width="1.8180%" height="15" fill="rgb(235,213,38)" fg:x="8631" fg:w="189"/><text x="83.2723%" y="239.50">&lt;..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (114 samples, 1.10%)</title><rect x="83.7437%" y="213" width="1.0966%" height="15" fill="rgb(237,122,38)" fg:x="8706" fg:w="114"/><text x="83.9937%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (76 samples, 0.73%)</title><rect x="84.1093%" y="197" width="0.7311%" height="15" fill="rgb(244,218,35)" fg:x="8744" fg:w="76"/><text x="84.3593%" y="207.50"></text></g><g><title>rlox::scanner::Scanner::peek (704 samples, 6.77%)</title><rect x="78.7707%" y="309" width="6.7718%" height="15" fill="rgb(240,68,47)" fg:x="8189" fg:w="704"/><text x="79.0207%" y="319.50">rlox::sca..</text></g><g><title>core::iter::traits::iterator::Iterator::nth (704 samples, 6.77%)</title><rect x="78.7707%" y="293" width="6.7718%" height="15" fill="rgb(210,16,53)" fg:x="8189" fg:w="704"/><text x="79.0207%" y="303.50">core::ite..</text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (704 samples, 6.77%)</title><rect x="78.7707%" y="277" width="6.7718%" height="15" fill="rgb(235,124,12)" fg:x="8189" fg:w="704"/><text x="79.0207%" y="287.50">core::ite..</text></g><g><title>core::option::Option&lt;T&gt;::ok_or (73 samples, 0.70%)</title><rect x="84.8403%" y="261" width="0.7022%" height="15" fill="rgb(224,169,11)" fg:x="8820" fg:w="73"/><text x="85.0903%" y="271.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (517 samples, 4.97%)</title><rect x="85.5521%" y="245" width="4.9731%" height="15" fill="rgb(250,166,2)" fg:x="8894" fg:w="517"/><text x="85.8021%" y="255.50">&lt;core:..</text></g><g><title>core::str::validations::next_code_point (517 samples, 4.97%)</title><rect x="85.5521%" y="229" width="4.9731%" height="15" fill="rgb(242,216,29)" fg:x="8894" fg:w="517"/><text x="85.8021%" y="239.50">core::..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (144 samples, 1.39%)</title><rect x="89.1401%" y="213" width="1.3851%" height="15" fill="rgb(230,116,27)" fg:x="9267" fg:w="144"/><text x="89.3901%" y="223.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (91 samples, 0.88%)</title><rect x="89.6499%" y="197" width="0.8753%" height="15" fill="rgb(228,99,48)" fg:x="9320" fg:w="91"/><text x="89.8999%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (69 samples, 0.66%)</title><rect x="89.8615%" y="181" width="0.6637%" height="15" fill="rgb(253,11,6)" fg:x="9342" fg:w="69"/><text x="90.1115%" y="191.50"></text></g><g><title>rlox::scanner::Scanner::advance (588 samples, 5.66%)</title><rect x="85.5425%" y="293" width="5.6560%" height="15" fill="rgb(247,143,39)" fg:x="8893" fg:w="588"/><text x="85.7925%" y="303.50">rlox::s..</text></g><g><title>core::iter::traits::iterator::Iterator::nth (588 samples, 5.66%)</title><rect x="85.5425%" y="277" width="5.6560%" height="15" fill="rgb(236,97,10)" fg:x="8893" fg:w="588"/><text x="85.7925%" y="287.50">core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (588 samples, 5.66%)</title><rect x="85.5425%" y="261" width="5.6560%" height="15" fill="rgb(233,208,19)" fg:x="8893" fg:w="588"/><text x="85.7925%" y="271.50">core::i..</text></g><g><title>core::option::Option&lt;T&gt;::ok_or (70 samples, 0.67%)</title><rect x="90.5252%" y="245" width="0.6733%" height="15" fill="rgb(216,164,2)" fg:x="9411" fg:w="70"/><text x="90.7752%" y="255.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (771 samples, 7.42%)</title><rect x="91.1985%" y="245" width="7.4163%" height="15" fill="rgb(220,129,5)" fg:x="9481" fg:w="771"/><text x="91.4485%" y="255.50">&lt;core::str..</text></g><g><title>core::str::validations::next_code_point (771 samples, 7.42%)</title><rect x="91.1985%" y="229" width="7.4163%" height="15" fill="rgb(242,17,10)" fg:x="9481" fg:w="771"/><text x="91.4485%" y="239.50">core::str:..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (230 samples, 2.21%)</title><rect x="96.4025%" y="213" width="2.2124%" height="15" fill="rgb(242,107,0)" fg:x="10022" fg:w="230"/><text x="96.6525%" y="223.50">&lt;..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (153 samples, 1.47%)</title><rect x="97.1431%" y="197" width="1.4717%" height="15" fill="rgb(251,28,31)" fg:x="10099" fg:w="153"/><text x="97.3931%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (103 samples, 0.99%)</title><rect x="97.6241%" y="181" width="0.9908%" height="15" fill="rgb(233,223,10)" fg:x="10149" fg:w="103"/><text x="97.8741%" y="191.50"></text></g><g><title>rlox::scanner::Scanner::scan_tokens (10,341 samples, 99.47%)</title><rect x="0.2212%" y="341" width="99.4710%" height="15" fill="rgb(215,21,27)" fg:x="23" fg:w="10341"/><text x="0.4712%" y="351.50">rlox::scanner::Scanner::scan_tokens</text></g><g><title>rlox::scanner::Scanner::scan_token (10,341 samples, 99.47%)</title><rect x="0.2212%" y="325" width="99.4710%" height="15" fill="rgb(232,23,21)" fg:x="23" fg:w="10341"/><text x="0.4712%" y="335.50">rlox::scanner::Scanner::scan_token</text></g><g><title>rlox::scanner::Scanner::string (1,471 samples, 14.15%)</title><rect x="85.5425%" y="309" width="14.1497%" height="15" fill="rgb(244,5,23)" fg:x="8893" fg:w="1471"/><text x="85.7925%" y="319.50">rlox::scanner::Scanne..</text></g><g><title>rlox::scanner::Scanner::peek (883 samples, 8.49%)</title><rect x="91.1985%" y="293" width="8.4937%" height="15" fill="rgb(226,81,46)" fg:x="9481" fg:w="883"/><text x="91.4485%" y="303.50">rlox::scanne..</text></g><g><title>core::iter::traits::iterator::Iterator::nth (883 samples, 8.49%)</title><rect x="91.1985%" y="277" width="8.4937%" height="15" fill="rgb(247,70,30)" fg:x="9481" fg:w="883"/><text x="91.4485%" y="287.50">core::iter::..</text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (883 samples, 8.49%)</title><rect x="91.1985%" y="261" width="8.4937%" height="15" fill="rgb(212,68,19)" fg:x="9481" fg:w="883"/><text x="91.4485%" y="271.50">core::iter::..</text></g><g><title>core::option::Option&lt;T&gt;::ok_or (112 samples, 1.08%)</title><rect x="98.6149%" y="245" width="1.0773%" height="15" fill="rgb(240,187,13)" fg:x="10252" fg:w="112"/><text x="98.8649%" y="255.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (2 samples, 0.02%)</title><rect x="99.7210%" y="85" width="0.0192%" height="15" fill="rgb(223,113,26)" fg:x="10367" fg:w="2"/><text x="99.9710%" y="95.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::escape_debug_ext (2 samples, 0.02%)</title><rect x="99.7210%" y="69" width="0.0192%" height="15" fill="rgb(206,192,2)" fg:x="10367" fg:w="2"/><text x="99.9710%" y="79.50"></text></g><g><title>core::unicode::printable::is_printable (2 samples, 0.02%)</title><rect x="99.7210%" y="53" width="0.0192%" height="15" fill="rgb(241,108,4)" fg:x="10367" fg:w="2"/><text x="99.9710%" y="63.50"></text></g><g><title>core::unicode::printable::check (2 samples, 0.02%)</title><rect x="99.7210%" y="37" width="0.0192%" height="15" fill="rgb(247,173,49)" fg:x="10367" fg:w="2"/><text x="99.9710%" y="47.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (4 samples, 0.04%)</title><rect x="99.7210%" y="149" width="0.0385%" height="15" fill="rgb(224,114,35)" fg:x="10367" fg:w="4"/><text x="99.9710%" y="159.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (4 samples, 0.04%)</title><rect x="99.7210%" y="133" width="0.0385%" height="15" fill="rgb(245,159,27)" fg:x="10367" fg:w="4"/><text x="99.9710%" y="143.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (4 samples, 0.04%)</title><rect x="99.7210%" y="117" width="0.0385%" height="15" fill="rgb(245,172,44)" fg:x="10367" fg:w="4"/><text x="99.9710%" y="127.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (4 samples, 0.04%)</title><rect x="99.7210%" y="101" width="0.0385%" height="15" fill="rgb(236,23,11)" fg:x="10367" fg:w="4"/><text x="99.9710%" y="111.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (5 samples, 0.05%)</title><rect x="99.7210%" y="165" width="0.0481%" height="15" fill="rgb(205,117,38)" fg:x="10367" fg:w="5"/><text x="99.9710%" y="175.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::escape_debug_ext (3 samples, 0.03%)</title><rect x="99.7884%" y="149" width="0.0289%" height="15" fill="rgb(237,72,25)" fg:x="10374" fg:w="3"/><text x="100.0384%" y="159.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (7 samples, 0.07%)</title><rect x="99.7691%" y="165" width="0.0673%" height="15" fill="rgb(244,70,9)" fg:x="10372" fg:w="7"/><text x="100.0191%" y="175.50"></text></g><g><title>core::fmt::Formatter::write_str (2 samples, 0.02%)</title><rect x="99.8172%" y="149" width="0.0192%" height="15" fill="rgb(217,125,39)" fg:x="10377" fg:w="2"/><text x="100.0672%" y="159.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.02%)</title><rect x="99.8172%" y="133" width="0.0192%" height="15" fill="rgb(235,36,10)" fg:x="10377" fg:w="2"/><text x="100.0672%" y="143.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (2 samples, 0.02%)</title><rect x="99.8461%" y="101" width="0.0192%" height="15" fill="rgb(251,123,47)" fg:x="10380" fg:w="2"/><text x="100.0961%" y="111.50"></text></g><g><title>std::sys_common::memchr::memrchr (2 samples, 0.02%)</title><rect x="99.8461%" y="85" width="0.0192%" height="15" fill="rgb(221,13,13)" fg:x="10380" fg:w="2"/><text x="100.0961%" y="95.50"></text></g><g><title>std::sys::unix::memchr::memrchr (2 samples, 0.02%)</title><rect x="99.8461%" y="69" width="0.0192%" height="15" fill="rgb(238,131,9)" fg:x="10380" fg:w="2"/><text x="100.0961%" y="79.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (2 samples, 0.02%)</title><rect x="99.8461%" y="53" width="0.0192%" height="15" fill="rgb(211,50,8)" fg:x="10380" fg:w="2"/><text x="100.0961%" y="63.50"></text></g><g><title>__memrchr_avx2 (2 samples, 0.02%)</title><rect x="99.8461%" y="37" width="0.0192%" height="15" fill="rgb(245,182,24)" fg:x="10380" fg:w="2"/><text x="100.0961%" y="47.50"></text></g><g><title>core::fmt::Formatter::write_str (8 samples, 0.08%)</title><rect x="99.8365%" y="165" width="0.0770%" height="15" fill="rgb(242,14,37)" fg:x="10379" fg:w="8"/><text x="100.0865%" y="175.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (8 samples, 0.08%)</title><rect x="99.8365%" y="149" width="0.0770%" height="15" fill="rgb(246,228,12)" fg:x="10379" fg:w="8"/><text x="100.0865%" y="159.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (7 samples, 0.07%)</title><rect x="99.8461%" y="133" width="0.0673%" height="15" fill="rgb(213,55,15)" fg:x="10380" fg:w="7"/><text x="100.0961%" y="143.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (7 samples, 0.07%)</title><rect x="99.8461%" y="117" width="0.0673%" height="15" fill="rgb(209,9,3)" fg:x="10380" fg:w="7"/><text x="100.0961%" y="127.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (5 samples, 0.05%)</title><rect x="99.8653%" y="101" width="0.0481%" height="15" fill="rgb(230,59,30)" fg:x="10382" fg:w="5"/><text x="100.1153%" y="111.50"></text></g><g><title>__memmove_avx_unaligned_erms (5 samples, 0.05%)</title><rect x="99.8653%" y="85" width="0.0481%" height="15" fill="rgb(209,121,21)" fg:x="10382" fg:w="5"/><text x="100.1153%" y="95.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (22 samples, 0.21%)</title><rect x="99.7114%" y="213" width="0.2116%" height="15" fill="rgb(220,109,13)" fg:x="10366" fg:w="22"/><text x="99.9614%" y="223.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (21 samples, 0.20%)</title><rect x="99.7210%" y="197" width="0.2020%" height="15" fill="rgb(232,18,1)" fg:x="10367" fg:w="21"/><text x="99.9710%" y="207.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (21 samples, 0.20%)</title><rect x="99.7210%" y="181" width="0.2020%" height="15" fill="rgb(215,41,42)" fg:x="10367" fg:w="21"/><text x="99.9710%" y="191.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (25 samples, 0.24%)</title><rect x="99.7018%" y="245" width="0.2405%" height="15" fill="rgb(224,123,36)" fg:x="10365" fg:w="25"/><text x="99.9518%" y="255.50"></text></g><g><title>&lt;rlox::token::Token as core::fmt::Debug&gt;::fmt (25 samples, 0.24%)</title><rect x="99.7018%" y="229" width="0.2405%" height="15" fill="rgb(240,125,3)" fg:x="10365" fg:w="25"/><text x="99.9518%" y="239.50"></text></g><g><title>core::fmt::builders::DebugStruct::finish (2 samples, 0.02%)</title><rect x="99.9230%" y="213" width="0.0192%" height="15" fill="rgb(205,98,50)" fg:x="10388" fg:w="2"/><text x="100.1730%" y="223.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.02%)</title><rect x="99.9230%" y="197" width="0.0192%" height="15" fill="rgb(205,185,37)" fg:x="10388" fg:w="2"/><text x="100.1730%" y="207.50"></text></g><g><title>core::fmt::builders::DebugStruct::finish (2 samples, 0.02%)</title><rect x="99.9230%" y="181" width="0.0192%" height="15" fill="rgb(238,207,15)" fg:x="10388" fg:w="2"/><text x="100.1730%" y="191.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.02%)</title><rect x="99.9230%" y="165" width="0.0192%" height="15" fill="rgb(213,199,42)" fg:x="10388" fg:w="2"/><text x="100.1730%" y="175.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 0.02%)</title><rect x="99.9230%" y="149" width="0.0192%" height="15" fill="rgb(235,201,11)" fg:x="10388" fg:w="2"/><text x="100.1730%" y="159.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (2 samples, 0.02%)</title><rect x="99.9230%" y="133" width="0.0192%" height="15" fill="rgb(207,46,11)" fg:x="10388" fg:w="2"/><text x="100.1730%" y="143.50"></text></g><g><title>_start (10,371 samples, 99.76%)</title><rect x="0.2020%" y="629" width="99.7595%" height="15" fill="rgb(241,35,35)" fg:x="21" fg:w="10371"/><text x="0.4520%" y="639.50">_start</text></g><g><title>__libc_start_main (10,371 samples, 99.76%)</title><rect x="0.2020%" y="613" width="99.7595%" height="15" fill="rgb(243,32,47)" fg:x="21" fg:w="10371"/><text x="0.4520%" y="623.50">__libc_start_main</text></g><g><title>main (10,371 samples, 99.76%)</title><rect x="0.2020%" y="597" width="99.7595%" height="15" fill="rgb(247,202,23)" fg:x="21" fg:w="10371"/><text x="0.4520%" y="607.50">main</text></g><g><title>std::rt::lang_start_internal (10,371 samples, 99.76%)</title><rect x="0.2020%" y="581" width="99.7595%" height="15" fill="rgb(219,102,11)" fg:x="21" fg:w="10371"/><text x="0.4520%" y="591.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (10,371 samples, 99.76%)</title><rect x="0.2020%" y="565" width="99.7595%" height="15" fill="rgb(243,110,44)" fg:x="21" fg:w="10371"/><text x="0.4520%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (10,371 samples, 99.76%)</title><rect x="0.2020%" y="549" width="99.7595%" height="15" fill="rgb(222,74,54)" fg:x="21" fg:w="10371"/><text x="0.4520%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (10,371 samples, 99.76%)</title><rect x="0.2020%" y="533" width="99.7595%" height="15" fill="rgb(216,99,12)" fg:x="21" fg:w="10371"/><text x="0.4520%" y="543.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (10,371 samples, 99.76%)</title><rect x="0.2020%" y="517" width="99.7595%" height="15" fill="rgb(226,22,26)" fg:x="21" fg:w="10371"/><text x="0.4520%" y="527.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (10,371 samples, 99.76%)</title><rect x="0.2020%" y="501" width="99.7595%" height="15" fill="rgb(217,163,10)" fg:x="21" fg:w="10371"/><text x="0.4520%" y="511.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (10,371 samples, 99.76%)</title><rect x="0.2020%" y="485" width="99.7595%" height="15" fill="rgb(213,25,53)" fg:x="21" fg:w="10371"/><text x="0.4520%" y="495.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (10,371 samples, 99.76%)</title><rect x="0.2020%" y="469" width="99.7595%" height="15" fill="rgb(252,105,26)" fg:x="21" fg:w="10371"/><text x="0.4520%" y="479.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (10,371 samples, 99.76%)</title><rect x="0.2020%" y="453" width="99.7595%" height="15" fill="rgb(220,39,43)" fg:x="21" fg:w="10371"/><text x="0.4520%" y="463.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (10,371 samples, 99.76%)</title><rect x="0.2020%" y="437" width="99.7595%" height="15" fill="rgb(229,68,48)" fg:x="21" fg:w="10371"/><text x="0.4520%" y="447.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (10,371 samples, 99.76%)</title><rect x="0.2020%" y="421" width="99.7595%" height="15" fill="rgb(252,8,32)" fg:x="21" fg:w="10371"/><text x="0.4520%" y="431.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (10,371 samples, 99.76%)</title><rect x="0.2020%" y="405" width="99.7595%" height="15" fill="rgb(223,20,43)" fg:x="21" fg:w="10371"/><text x="0.4520%" y="415.50">core::ops::function::FnOnce::call_once</text></g><g><title>rlox::main (10,371 samples, 99.76%)</title><rect x="0.2020%" y="389" width="99.7595%" height="15" fill="rgb(229,81,49)" fg:x="21" fg:w="10371"/><text x="0.4520%" y="399.50">rlox::main</text></g><g><title>rlox::lox::Lox::run_file (10,371 samples, 99.76%)</title><rect x="0.2020%" y="373" width="99.7595%" height="15" fill="rgb(236,28,36)" fg:x="21" fg:w="10371"/><text x="0.4520%" y="383.50">rlox::lox::Lox::run_file</text></g><g><title>rlox::lox::Lox::run (10,371 samples, 99.76%)</title><rect x="0.2020%" y="357" width="99.7595%" height="15" fill="rgb(249,185,26)" fg:x="21" fg:w="10371"/><text x="0.4520%" y="367.50">rlox::lox::Lox::run</text></g><g><title>std::io::stdio::_print (28 samples, 0.27%)</title><rect x="99.6922%" y="341" width="0.2693%" height="15" fill="rgb(249,174,33)" fg:x="10364" fg:w="28"/><text x="99.9422%" y="351.50"></text></g><g><title>std::io::stdio::print_to (27 samples, 0.26%)</title><rect x="99.7018%" y="325" width="0.2597%" height="15" fill="rgb(233,201,37)" fg:x="10365" fg:w="27"/><text x="99.9518%" y="335.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (27 samples, 0.26%)</title><rect x="99.7018%" y="309" width="0.2597%" height="15" fill="rgb(221,78,26)" fg:x="10365" fg:w="27"/><text x="99.9518%" y="319.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (27 samples, 0.26%)</title><rect x="99.7018%" y="293" width="0.2597%" height="15" fill="rgb(250,127,30)" fg:x="10365" fg:w="27"/><text x="99.9518%" y="303.50"></text></g><g><title>std::io::Write::write_fmt (27 samples, 0.26%)</title><rect x="99.7018%" y="277" width="0.2597%" height="15" fill="rgb(230,49,44)" fg:x="10365" fg:w="27"/><text x="99.9518%" y="287.50"></text></g><g><title>core::fmt::write (27 samples, 0.26%)</title><rect x="99.7018%" y="261" width="0.2597%" height="15" fill="rgb(229,67,23)" fg:x="10365" fg:w="27"/><text x="99.9518%" y="271.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.02%)</title><rect x="99.9423%" y="245" width="0.0192%" height="15" fill="rgb(249,83,47)" fg:x="10390" fg:w="2"/><text x="100.1923%" y="255.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 0.02%)</title><rect x="99.9423%" y="229" width="0.0192%" height="15" fill="rgb(215,43,3)" fg:x="10390" fg:w="2"/><text x="100.1923%" y="239.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (3 samples, 0.03%)</title><rect x="99.9615%" y="629" width="0.0289%" height="15" fill="rgb(238,154,13)" fg:x="10392" fg:w="3"/><text x="100.2115%" y="639.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.02%)</title><rect x="99.9711%" y="613" width="0.0192%" height="15" fill="rgb(219,56,2)" fg:x="10393" fg:w="2"/><text x="100.2211%" y="623.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (2 samples, 0.02%)</title><rect x="99.9711%" y="597" width="0.0192%" height="15" fill="rgb(233,0,4)" fg:x="10393" fg:w="2"/><text x="100.2211%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_str (2 samples, 0.02%)</title><rect x="99.9711%" y="581" width="0.0192%" height="15" fill="rgb(235,30,7)" fg:x="10393" fg:w="2"/><text x="100.2211%" y="591.50"></text></g><g><title>all (10,396 samples, 100%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(250,79,13)" fg:x="0" fg:w="10396"/><text x="0.2500%" y="671.50"></text></g><g><title>rlox (10,396 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(211,146,34)" fg:x="0" fg:w="10396"/><text x="0.2500%" y="655.50">rlox</text></g></svg></svg>