{
  "version": 3,
  "sources": ["../pkg/wasm.js", "../wasm-render.js"],
  "sourcesContent": ["\nlet wasm;\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* Example render.\n* @returns {Uint8Array}\n*/\nexport function render() {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.render(retptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nasync function init(input) {\n    if (typeof input === 'undefined') {\n        input = new URL('wasm_bg.wasm', import.meta.url);\n    }\n    const imports = {};\n\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n\n\n    const { instance, module } = await load(await input, imports);\n\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n\n    return wasm;\n}\n\nexport default init;\n\n", "import init, { render } from \"./pkg/wasm.js\";\n\nconsole.log(\"wasm-render module\");\n\n/**\n * Initialize wasm module and run the render function.  Embeds the render\n * result (flat RGBA array of u8's) into a Uint8ClampedArray view and embeds\n * that into an ImageData object suitable to draw into a <canvas>.\n *\n * ImageData is a supported type to pass to/from Web Workers:\n * https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\n */\nexport async function wasmRender() {\n    console.time(\"tracing rays\");\n    const pixels = render();\n    console.timeEnd(\"tracing rays\");\n\n    return new ImageData(new Uint8ClampedArray(pixels), 500);\n}\n\n/**\n * Initialize the WASM module.\n */\nexport async function wasmInit() {\n    console.time(\"init\");\n    await init();\n    console.timeEnd(\"init\");\n}\n"],
  "mappings": ";AACA,IAAI;AAEJ,IAAI,uBAAuB;AAC3B,2BAA2B;AACvB,MAAI,yBAAyB,QAAQ,qBAAqB,WAAW,KAAK,OAAO,QAAQ;AACrF,2BAAuB,IAAI,WAAW,KAAK,OAAO;AAAA;AAEtD,SAAO;AAAA;AAGX,IAAI,uBAAuB;AAC3B,2BAA2B;AACvB,MAAI,yBAAyB,QAAQ,qBAAqB,WAAW,KAAK,OAAO,QAAQ;AACrF,2BAAuB,IAAI,WAAW,KAAK,OAAO;AAAA;AAEtD,SAAO;AAAA;AAGX,6BAA6B,KAAK,KAAK;AACnC,SAAO,kBAAkB,SAAS,MAAM,GAAG,MAAM,IAAI;AAAA;AAMlD,kBAAkB;AACrB,MAAI;AACA,UAAM,SAAS,KAAK,gCAAgC;AACpD,SAAK,OAAO;AACZ,QAAI,KAAK,kBAAkB,SAAS,IAAI;AACxC,QAAI,KAAK,kBAAkB,SAAS,IAAI;AACxC,QAAI,KAAK,oBAAoB,IAAI,IAAI;AACrC,SAAK,gBAAgB,IAAI,KAAK;AAC9B,WAAO;AAAA,YACT;AACE,SAAK,gCAAgC;AAAA;AAAA;AAI7C,oBAAoB,QAAQ,SAAS;AACjC,MAAI,OAAO,aAAa,cAAc,kBAAkB,UAAU;AAC9D,QAAI,OAAO,YAAY,yBAAyB,YAAY;AACxD,UAAI;AACA,eAAO,MAAM,YAAY,qBAAqB,QAAQ;AAAA,eAEjD,GAAP;AACE,YAAI,OAAO,QAAQ,IAAI,mBAAmB,oBAAoB;AAC1D,kBAAQ,KAAK,qMAAqM;AAAA,eAE/M;AACH,gBAAM;AAAA;AAAA;AAAA;AAKlB,UAAM,QAAQ,MAAM,OAAO;AAC3B,WAAO,MAAM,YAAY,YAAY,OAAO;AAAA,SAEzC;AACH,UAAM,WAAW,MAAM,YAAY,YAAY,QAAQ;AAEvD,QAAI,oBAAoB,YAAY,UAAU;AAC1C,aAAO,EAAE,UAAU;AAAA,WAEhB;AACH,aAAO;AAAA;AAAA;AAAA;AAKnB,oBAAoB,OAAO;AACvB,MAAI,OAAO,UAAU,aAAa;AAC9B,YAAQ,IAAI,IAAI,gBAAgB,YAAY;AAAA;AAEhD,QAAM,UAAU;AAGhB,MAAI,OAAO,UAAU,YAAa,OAAO,YAAY,cAAc,iBAAiB,WAAa,OAAO,QAAQ,cAAc,iBAAiB,KAAM;AACjJ,YAAQ,MAAM;AAAA;AAKlB,QAAM,EAAE,UAAU,WAAW,MAAM,KAAK,MAAM,OAAO;AAErD,SAAO,SAAS;AAChB,OAAK,yBAAyB;AAE9B,SAAO;AAAA;AAGX,IAAO,eAAQ;;;AC1Ff,QAAQ,IAAI;AAUZ,4BAAmC;AAC/B,UAAQ,KAAK;AACb,QAAM,SAAS;AACf,UAAQ,QAAQ;AAEhB,SAAO,IAAI,UAAU,IAAI,kBAAkB,SAAS;AAAA;AAMxD,0BAAiC;AAC7B,UAAQ,KAAK;AACb,QAAM;AACN,UAAQ,QAAQ;AAAA;",
  "names": []
}
