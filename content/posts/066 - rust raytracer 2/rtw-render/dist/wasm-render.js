var n,s=new Array(32).fill(void 0);s.push(void 0,null,!0,!1);function c(t){return s[t]}var _=s.length;function U(t){t<36||(s[t]=_,_=t)}function m(t){let e=c(t);return U(t),e}var b=new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0});b.decode();var w=null;function R(){return(w===null||w.buffer!==n.memory.buffer)&&(w=new Uint8Array(n.memory.buffer)),w}function j(t,e){return b.decode(R().subarray(t,t+e))}function l(t){_===s.length&&s.push(s.length+1);let e=_;return _=s[e],s[e]=t,e}var g=null;function p(){return(g===null||g.buffer!==n.memory.buffer)&&(g=new Int32Array(n.memory.buffer)),g}var f=new Uint32Array(2),y=new BigUint64Array(f.buffer);function d(){var t=n.render();return u.__wrap(t)}var u=class{static __wrap(e){let r=Object.create(u.prototype);return r.ptr=e,r}__destroy_into_raw(){let e=this.ptr;return this.ptr=0,e}free(){let e=this.__destroy_into_raw();n.__wbg_wasmfinalimage_free(e)}get width(){var e=n.__wbg_get_wasmfinalimage_width(this.ptr);return e>>>0}set width(e){n.__wbg_set_wasmfinalimage_width(this.ptr,e)}get height(){var e=n.__wbg_get_wasmfinalimage_height(this.ptr);return e>>>0}set height(e){n.__wbg_set_wasmfinalimage_height(this.ptr,e)}get samples_per_pixel(){var e=n.__wbg_get_wasmfinalimage_samples_per_pixel(this.ptr);return e}set samples_per_pixel(e){n.__wbg_set_wasmfinalimage_samples_per_pixel(this.ptr,e)}get total_rays(){try{let i=n.__wbindgen_add_to_stack_pointer(-16);n.__wbg_get_wasmfinalimage_total_rays(i,this.ptr);var e=p()[i/4+0],r=p()[i/4+1];return f[0]=e,f[1]=r,y[0]}finally{n.__wbindgen_add_to_stack_pointer(16)}}set total_rays(e){y[0]=e;let r=f[0],i=f[1];n.__wbg_set_wasmfinalimage_total_rays(this.ptr,r,i)}get pixels(){var e=n.wasmfinalimage_pixels(this.ptr);return m(e)}};async function M(t,e){if(typeof Response=="function"&&t instanceof Response){if(typeof WebAssembly.instantiateStreaming=="function")try{return await WebAssembly.instantiateStreaming(t,e)}catch(i){if(t.headers.get("Content-Type")!="application/wasm")console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",i);else throw i}let r=await t.arrayBuffer();return await WebAssembly.instantiate(r,e)}else{let r=await WebAssembly.instantiate(t,e);return r instanceof WebAssembly.Instance?{instance:r,module:t}:r}}async function h(t){typeof t=="undefined"&&(t=new URL("wasm_bg.wasm",import.meta.url));let e={};e.wbg={},e.wbg.__wbindgen_object_drop_ref=function(a){m(a)},e.wbg.__wbg_buffer_9e184d6f785de5ed=function(a){var o=c(a).buffer;return l(o)},e.wbg.__wbg_newwithbyteoffsetandlength_fade671d5e166a76=function(a,o,A){var x=new Uint8ClampedArray(c(a),o>>>0,A>>>0);return l(x)},e.wbg.__wbg_new_54026f195bd9459a=function(a){var o=new Uint8ClampedArray(c(a));return l(o)},e.wbg.__wbindgen_throw=function(a,o){throw new Error(j(a,o))},e.wbg.__wbindgen_memory=function(){var a=n.memory;return l(a)},(typeof t=="string"||typeof Request=="function"&&t instanceof Request||typeof URL=="function"&&t instanceof URL)&&(t=fetch(t));let{instance:r,module:i}=await M(await t,e);return n=r.exports,h.__wbindgen_wasm_module=i,n}var v=h;async function O(){console.time("tracing rays");let t=d();return console.timeEnd("tracing rays"),t}async function W(){console.time("init"),await v(),console.timeEnd("init")}export{W as wasmInit,O as wasmRender};
//# sourceMappingURL=data:application/json;base64,
